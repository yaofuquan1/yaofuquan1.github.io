<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular学习笔记(一)</title>
    <url>/2022/11/21/Angular%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
    <content><![CDATA[<h5 id="1-开发时对部分前端框架组件功能的认知不清楚："><a href="#1-开发时对部分前端框架组件功能的认知不清楚：" class="headerlink" title="1.开发时对部分前端框架组件功能的认知不清楚："></a>1.开发时对部分前端框架组件功能的认知不清楚：</h5><p><img src="/2022/11/21/Angular%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/1.png" alt="alt"></p>
<h5 id="2-select和tree的结合体"><a href="#2-select和tree的结合体" class="headerlink" title="2.select和tree的结合体:"></a>2.select和tree的结合体:</h5><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">  0.支持双向绑定和ngModelChange。</span><br><span class="line">  1.nzExpandedKeys：展开的节点keys</span><br><span class="line">  2.nzShowSearch：是否显示模糊搜索，默认false</span><br><span class="line">  3.nzAllowClear：是否支持clear，默认true</span><br><span class="line">  4.nzMultiple：是否支持多选</span><br><span class="line">*/</span><br><span class="line"><span class="tag">&lt;<span class="name">nz-tree-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;width: 250px&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">nzExpandedKeys</span>]=<span class="string">&quot;expandKeys&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">nzNodes</span>]=<span class="string">&quot;basicNodes&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">nzShowSearch</span></span></span><br><span class="line"><span class="tag">  <span class="attr">nzPlaceHolder</span>=<span class="string">&quot;请输入&quot;</span></span></span><br><span class="line"><span class="tag">  [(<span class="attr">ngModel</span>)]=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">  (<span class="attr">ngModelChange</span>)=<span class="string">&quot;onChange($event)&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">nzAllowClear</span>]=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">nzMultiple</span>]=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="超过N个…显示"><a href="#超过N个…显示" class="headerlink" title="超过N个…显示"></a>超过N个…显示</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[nzMaxTagCount]=&quot;2&quot;</span><br><span class="line">[nzMaxTagPlaceholder]=&quot;omittedPlaceHolder&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">omittedPlaceHolder</span> <span class="attr">let-omittedValues</span>&gt;</span></span><br><span class="line">  还有 &#123;&#123; omittedValues.length &#125;&#125; 条...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// omittedPlaceHolder是模板。</span><br></pre></td></tr></table></figure>

<h6 id="checkbox功能"><a href="#checkbox功能" class="headerlink" title="checkbox功能"></a>checkbox功能</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nz-tree-select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;width: 250px&quot;</span></span></span><br><span class="line"><span class="tag">  [(<span class="attr">ngModel</span>)]=<span class="string">&quot;checkboxValue&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">nzNodes</span>]=<span class="string">&quot;checkboxNodes&quot;</span></span></span><br><span class="line"><span class="tag">  (<span class="attr">ngModelChange</span>)=<span class="string">&quot;onCheckboxChange($event)&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">nzShowSearch</span></span></span><br><span class="line"><span class="tag">  <span class="attr">nzCheckable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">nzPlaceHolder</span>=<span class="string">&quot;Please select&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">nzDisplayWith</span>]=<span class="string">&quot;display&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nz-tree-select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>👌<code>nzCheckable</code>就是加上了checkbox，且支持多选。<br>😊<code>[nzDisplayWith]=&quot;display&quot;</code>改变显示字段。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">display = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node);</span><br><span class="line">  <span class="keyword">return</span> node.<span class="property">key</span>; <span class="comment">// 默认显示的是title；改成value不行；修改为下面的写法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>👍[nzDisplayWith]<code> ：如何在输入框显示所选的节点值的方法 ，默认</code>(node: NzTreeNode) &#x3D;&gt; node.title</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">display = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node);</span><br><span class="line">  <span class="keyword">return</span> node.<span class="property">origin</span>.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL增删改查(CRUD)详解</title>
    <url>/2022/11/18/MySQL%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-CRUD-%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="一、新增（Create-）语法："><a href="#一、新增（Create-）语法：" class="headerlink" title="一、新增（Create****）语法：**"></a>一<strong>、<strong><strong>新增（</strong></strong>Create****）</strong>语法：**</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">INSERT [INTO] table_name</span><br><span class="line"> [(column [, column] ...)]</span><br><span class="line"> <span class="built_in">VALUES</span> (value_list) [, (value_list)] ...</span><br></pre></td></tr></table></figure>

<h6 id="1、首先创建一个学生表"><a href="#1、首先创建一个学生表" class="headerlink" title="1、首先创建一个学生表"></a><strong>1、首先创建一个学生表</strong></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS student;</span><br><span class="line">CREATE TABLE <span class="title function_">student</span> <span class="params">(</span></span><br><span class="line"><span class="params">   id INT,</span></span><br><span class="line"><span class="params">   sn INT comment <span class="string">&#x27;学号&#x27;</span>,</span></span><br><span class="line"><span class="params">   name VARCHAR(<span class="number">20</span>)</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">   qq_mail <span class="title function_">VARCHAR</span><span class="params">(<span class="number">20</span>)</span> comment <span class="string">&#x27;QQ邮箱&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h5 id="一、插入数据方式"><a href="#一、插入数据方式" class="headerlink" title="一、插入数据方式"></a>一、插入数据方式</h5><h6 id="1-单行数据-全列插入"><a href="#1-单行数据-全列插入" class="headerlink" title="1.单行数据+全列插入"></a>1.单行数据+全列插入</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">INSERT INTO student <span class="title">VALUES</span><span class="params">(<span class="number">1</span>,<span class="number">101</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123@qq.com&#x27;</span>)</span></span>;</span><br><span class="line"><span class="function">INSERT INTO student <span class="title">VALUES</span> <span class="params">(<span class="number">2</span>,<span class="number">201</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;1234@qq.com&#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<h6 id="2、多行数据-指定列插入"><a href="#2、多行数据-指定列插入" class="headerlink" title="2、多行数据 + 指定列插入"></a>2、多行数据 + 指定列插入</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">insert into <span class="title">student</span> <span class="params">(id,sn,name,qq_mail)</span> <span class="title">values</span></span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">3</span>,<span class="number">301</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;234@qq.com&#x27;</span>)</span>,</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">4</span>,<span class="number">401</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;345@qq.com&#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="二、-查询（Retrieve）"><a href="#二、-查询（Retrieve）" class="headerlink" title="二、 查询（Retrieve）"></a><strong>二、</strong> <strong>查询（<strong><strong>Retrieve</strong></strong>）</strong></h4><p><strong>语法：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line"> [DISTINCT] &#123;* | &#123;column [, column] ...&#125; </span><br><span class="line"> [FROM table_name]</span><br><span class="line"> [WHERE ...]</span><br><span class="line"> [ORDER BY column [ASC | DESC], ...]</span><br><span class="line"> LIMIT ...</span><br></pre></td></tr></table></figure>

<p><strong>案列：创建一个考试成绩表</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS exam_result;</span><br><span class="line"><span class="function">CREATE TABLE <span class="title">exam_result</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"> id INT,</span></span></span><br><span class="line"><span class="params"><span class="function"> name VARCHAR(<span class="number">20</span>),</span></span></span><br><span class="line"><span class="params"><span class="function"> chinese DECIMAL(<span class="number">3</span>,<span class="number">1</span>),</span></span></span><br><span class="line"><span class="params"><span class="function"> math DECIMAL(<span class="number">3</span>,<span class="number">1</span>),</span></span></span><br><span class="line"><span class="params"><span class="function"> english DECIMAL(<span class="number">3</span>,<span class="number">1</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>插入测试数据</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">INSERT INTO <span class="title">exam_result</span> <span class="params">(id,name, chinese, math, english)</span> <span class="title">VALUES</span></span></span><br><span class="line"><span class="function"> <span class="params">(<span class="number">1</span>,<span class="string">&#x27;唐三藏&#x27;</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">56</span>)</span>,</span></span><br><span class="line"><span class="function"> <span class="params">(<span class="number">2</span>,<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">87.5</span>, <span class="number">78</span>, <span class="number">77</span>)</span>,</span></span><br><span class="line"><span class="function"> <span class="params">(<span class="number">3</span>,<span class="string">&#x27;猪悟能&#x27;</span>, <span class="number">88</span>, <span class="number">98.5</span>, <span class="number">90</span>)</span>,</span></span><br><span class="line"><span class="function"> <span class="params">(<span class="number">4</span>,<span class="string">&#x27;曹孟德&#x27;</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">67</span>)</span>,</span></span><br><span class="line"><span class="function"> <span class="params">(<span class="number">5</span>,<span class="string">&#x27;刘玄德&#x27;</span>, <span class="number">55.5</span>, <span class="number">85</span>, <span class="number">45</span>)</span>,</span></span><br><span class="line"><span class="function"> <span class="params">(<span class="number">6</span>,<span class="string">&#x27;孙权&#x27;</span>, <span class="number">70</span>, <span class="number">73</span>, <span class="number">78.5</span>)</span>,</span></span><br><span class="line"><span class="function"> <span class="params">(<span class="number">7</span>,<span class="string">&#x27;宋公明&#x27;</span>, <span class="number">75</span>, <span class="number">65</span>, <span class="number">30</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<h5 id="一、查询方式"><a href="#一、查询方式" class="headerlink" title="一、查询方式"></a>一、查询方式</h5><h6 id="1、全列查询"><a href="#1、全列查询" class="headerlink" title="1、全列查询"></a><strong>1、全列查询</strong></h6><p><strong>通常情况下不建议使用*全列查询<br>1、查询的列越多，意味着需要传输的数据量越大；<br>2、可能会影响到索引的使用。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">select * from exam_result;</span><br></pre></td></tr></table></figure>

<h6 id="2、指定列查询"><a href="#2、指定列查询" class="headerlink" title="2、指定列查询"></a><strong>2、指定列查询</strong></h6><p>指定列的顺序不需要按照表中的列顺序来。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">select id,name,chinese from exam_result;</span><br></pre></td></tr></table></figure>

<h6 id="3、查询字段为表达式"><a href="#3、查询字段为表达式" class="headerlink" title="3、查询字段为表达式"></a><strong>3、查询字段为表达式</strong></h6><p><strong>– 表达式不包含字段</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`SELECT id, name, 10 FROM exam_result;`</span><br></pre></td></tr></table></figure>

<p>**<br>– 表达式包含一个字段**</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, name, english + 10 FROM exam_result;</span><br></pre></td></tr></table></figure>

<p><strong>– 表达式包含多个字段</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, name, chinese + math + english FROM exam_result;</span><br></pre></td></tr></table></figure>

<h6 id="4-、别名"><a href="#4-、别名" class="headerlink" title="4 、别名"></a><strong>4 、别名</strong></h6><p>为查询结果中的列指定别名，表示返回的结果集中，以别名作为该列的名称，语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column [ AS ] alias_name [...] FROM table_name ;</span><br></pre></td></tr></table></figure>

<p>这里的总分就是我们定义的别名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, name, chinese + math + english 总分 FROM exam_result;</span><br></pre></td></tr></table></figure>

<h6 id="5-、去重：DISTINCT"><a href="#5-、去重：DISTINCT" class="headerlink" title="5 、去重：DISTINCT"></a><strong>5</strong> <strong>、<strong><strong>去重：</strong></strong>DISTINCT</strong></h6><p>使用 DISTINCT 关键字对某列数据进行去重：</p>
<p>比如我们这里对重复的数学成绩去重：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct math from exam_result;</span><br></pre></td></tr></table></figure>

<h3 id="6、-排序：-ORDER-BY"><a href="#6、-排序：-ORDER-BY" class="headerlink" title="6、 排序：****ORDER BY"></a><strong>6、</strong> <strong>排序：****ORDER BY</strong></h3><p><strong>语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- ASC 为升序（从小到大）</span><br><span class="line">-- DESC 为降序（从大到小）</span><br><span class="line">-- 默认为 ASC</span><br><span class="line">SELECT ... FROM table_name [WHERE ...] </span><br><span class="line"> ORDER BY column [ASC|DESC], [...];</span><br></pre></td></tr></table></figure>

<p>\1. 没有 ORDER BY 子句的查询，返回的顺序是未定义的，永远不要依赖这个顺序 。</p>
<p>\2. NULL 数据排序，视为比任何值都小，升序出现在最上面，降序出现在最下面。</p>
<p><strong>案例：– 查询同学姓名和 English，按 English 排序显示</strong></p>
<p>升序排列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT name, English FROM exam_result ORDER BY English;</span><br></pre></td></tr></table></figure>

<p>降序排列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT name, English FROM exam_result ORDER BY English desc; </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ERP开发总结</title>
    <url>/2022/12/04/ERP%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="ERP开发总结"><a href="#ERP开发总结" class="headerlink" title="ERP开发总结"></a>ERP开发总结</h4><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>通过本周的开发学到了很多技术和业务上的知识，这周最大的收获，是一次在执行SQL查询的过程中，我发现不过是几千条的数据，却用了10多秒的处理时间，就在想能不能有什么办法对自己写的sql语句进行优化，之后我在网上查找了许多资料，将自己开发常用的几条优化方法分享出来。</p>
<p>1.避免在where子句中对字段进行null值判断和进行表达式操作</p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id from duser  WHERE id*100=200;</span><br></pre></td></tr></table></figure>

<p>这样对字段进行算术运算，会造成引擎放弃使用索引，可以改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select  id from user  WHERE id=200/100;</span><br></pre></td></tr></table></figure>

<p>2.尽量避免使用or，会导致数据库引擎放弃索引进行全表扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t WHERE id = 1 OR id = 3</span><br></pre></td></tr></table></figure>

<p>可以用union代替or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t WHERE id = 1</span><br><span class="line"></span><br><span class="line">UNION</span><br><span class="line"></span><br><span class="line">SELECT * FROM t WHERE id = 3</span><br></pre></td></tr></table></figure>

<p>（PS：如果or两边的字段是同一个，如例子中这样。貌似两种方式效率差不多，即使union扫描的是索引，or扫描的是全表）</p>
<p>3.少用in 或 not in</p>
<p>对于连续的数值范围查询尽量使用BETWEEN AND，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name from duser where id BETWEEN 10 AND 100</span><br></pre></td></tr></table></figure>

<p>4.使用 EXPLAIN 关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。</p>
<p>EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序,比如，要确定一个查询是否是覆盖索引，我们只需要explain sql语句看Extra的结果是否是“Using index”即可。</p>
<p>以duser表举例，可以对name字段查询试一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from duser where name=&#x27;姚福泉&#x27;; //查询的name无法从索引数据获取</span><br><span class="line"></span><br><span class="line">explain select name from duser where name=&#x27;姚福泉&#x27;; //可以直接从索引获取</span><br></pre></td></tr></table></figure>

<p><img src="/2022/12/04/ERP%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/1.png" alt="alt"></p>
<p><img src="/2022/12/04/ERP%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/2.png" alt="alt"></p>
]]></content>
      <tags>
        <tag>ERP</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记之删除操作</title>
    <url>/2022/11/24/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="MySQL删除操作（delete、truncate和drop区别说明）"><a href="#MySQL删除操作（delete、truncate和drop区别说明）" class="headerlink" title="MySQL删除操作（delete、truncate和drop区别说明）"></a>MySQL删除操作（delete、truncate和drop区别说明）</h4><h5 id="一、delete"><a href="#一、delete" class="headerlink" title="一、delete"></a>一、delete</h5><p>delete主要用于删除数据，即将表中所有数据都删除了，但该表依然存在。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两种方式使用delete：</span><br><span class="line"></span><br><span class="line">1、从表中删除特定的行（where指定条件）删除学生表中id为2的记录：</span><br><span class="line">DELETE FROM student WHERE ID=2;</span><br><span class="line"></span><br><span class="line">2、从表中删除所有的行（不带where的）</span><br></pre></td></tr></table></figure>

<h5 id="二、truncate"><a href="#二、truncate" class="headerlink" title="二、truncate"></a>二、truncate</h5><p>truncate主要用于删除数据，但保留表结构，且数据不可恢复，该命令也不能添加查询条件。truncate的删除原理是重新创建一个表（不包含数据），然后将原来的表删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">truncate table 表名</span><br><span class="line"></span><br><span class="line">TRUNCATE table student;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truncate在功能上与不带 where 子句的delete语句相同：二者均删除表中的全部行。但 truncate比 delete速度快，且使用的系统和事务日志资源少。delete语句每次删除一行，并在事务日志中为所删除的每行记录一项。truncate通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</span><br></pre></td></tr></table></figure>

<h5 id="三、drop"><a href="#三、drop" class="headerlink" title="三、drop"></a>三、drop</h5><p>drop主要用于删除结构，即删除的时候不仅删除了表中的数据，还删除了表结构。如果我们要删除数据库或数据表，一般都会使用drop来删除。（使用drop删除表后，数据库中查询不到该表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">drop table 表名</span><br><span class="line"></span><br><span class="line">DROP database student;</span><br></pre></td></tr></table></figure>



<h5 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h5><ul>
<li>当你不再需要该表时，用 drop；</li>
<li>当你仍要保留该表，但要删除所有记录时， 用 truncate；</li>
<li>当你要删除部分记录时，用delete。</li>
</ul>
<p>————————————————<br>引用：<a href="https://blog.csdn.net/weixin_45639224/article/details">https://blog.csdn.net/weixin_45639224/article/details</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>git安装教程（从出生到入土）</title>
    <url>/2022/11/12/git%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<p>今天重新安装一下Git软件；就详细的记录一下安装步骤；</p>
<p>个人安装的环境：（快速安装基本简单；下一步默认其实也可以；看图就懂）</p>
<p>Windows10 64bit</p>
<p>Git 2.13.0(下载 git网址 ： <a href="https://link.jianshu.com/?t=https://git-scm.com/download">https://git-scm.com/download</a>）</p>
<h4 id="1-开始安装的界面–开始吧"><a href="#1-开始安装的界面–开始吧" class="headerlink" title="1.开始安装的界面–开始吧!"></a>1.开始安装的界面–开始吧!</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/1.jpg" alt="alt"></p>
<h4 id="2-安装路径"><a href="#2-安装路径" class="headerlink" title="2.安装路径"></a>2.安装路径</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/2.jpg" alt="alt"></p>
<h4 id="3-选择安装组件–推荐全选哟！"><a href="#3-选择安装组件–推荐全选哟！" class="headerlink" title="3.选择安装组件–推荐全选哟！"></a>3.选择安装组件–推荐全选哟！</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/3.jpg" alt="alt"></p>
<h4 id="4-我的选择"><a href="#4-我的选择" class="headerlink" title="4.我的选择"></a>4.我的选择</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/4.jpg" alt="alt"></p>
<h4 id="5-菜单文件夹–没什么要讲的-默认！"><a href="#5-菜单文件夹–没什么要讲的-默认！" class="headerlink" title="5.菜单文件夹–没什么要讲的 默认！"></a>5.菜单文件夹–没什么要讲的 默认！</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/5.jpg" alt="alt"></p>
<h4 id="6-修改系统的环境变量—建议选择上面两个（我是第一个）"><a href="#6-修改系统的环境变量—建议选择上面两个（我是第一个）" class="headerlink" title="6.修改系统的环境变量—建议选择上面两个（我是第一个）"></a>6.修改系统的环境变量—建议选择上面两个（我是第一个）</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/6.jpg" alt="alt"></p>
<h4 id="7-SSL的证书的选择"><a href="#7-SSL的证书的选择" class="headerlink" title="7.SSL的证书的选择"></a>7.SSL的证书的选择</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/7.jpg" alt="alt"></p>
<p><strong>https：（全称：Hyper Text Transfer Protocol over Secure Socket Layer）</strong></p>
<p>简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/http">http</a>:体系。用于安全的HTTP数据传输。</p>
<p><a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/https/285356?fr=aladdin">参考链接：百科</a></p>
<h4 id="8-配置行尾结束符（个人选择第三个了；可以根据自己情况而定）"><a href="#8-配置行尾结束符（个人选择第三个了；可以根据自己情况而定）" class="headerlink" title="8.配置行尾结束符（个人选择第三个了；可以根据自己情况而定）"></a>8.配置行尾结束符（个人选择第三个了；可以根据自己情况而定）</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/8.jpg" alt="alt"></p>
<h4 id="9-配置终端仿真"><a href="#9-配置终端仿真" class="headerlink" title="9.配置终端仿真"></a>9.配置终端仿真</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/9.jpg" alt="alt"></p>
<p>大多数其他Cygwin&#x2F;MSYS终端一样，MinTTY也是基于pseudo终端(“pty”)设备的。但是MinTTY并不能完全替代windows的<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6">命令提示符</a>。windows上自带简单的<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/%E6%96%87%E6%9C%AC%E8%BE%93%E5%87%BA">文本输出</a>的原生态的<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6">命令提示符</a>通常可以很好的工作，但交互性更好的诸如MinTTY这样的应用程序却可能出现故障——虽然通常都有应对方案。这就是为什么MinTTY不能完全替代windows自带的<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6">命令提示符</a>。</p>
<p><a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/MinTTY/9579126?fr=aladdin">参考链接：百科</a></p>
<h4 id="10-其他的配置–默认即可"><a href="#10-其他的配置–默认即可" class="headerlink" title="10.其他的配置–默认即可"></a>10.其他的配置–默认即可</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/10.jpg" alt="alt"></p>
<p>认证管理器：<a href="https://link.jianshu.com/?t=https://github.com/Microsoft/Git-Credential-Manager-for-Windows">参考链接</a>就是Github的账号等认证机制</p>
<p>符号链接：<a href="https://link.jianshu.com/?t=https://github.com/git-for-windows/git/wiki/Symbolic-Links">参考</a>官方介绍<a href="https://link.jianshu.com/?t=http://blog.csdn.net/u013777351/article/details/50557260">参考博文</a></p>
<h4 id="11-使用测试界面"><a href="#11-使用测试界面" class="headerlink" title="11.使用测试界面"></a>11.使用测试界面</h4><p><img src="/2022/11/12/git%E6%8F%90%E4%BA%A4/11.jpg" alt="alt"></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo友情链接</title>
    <url>/2022/11/06/hexo%E5%8D%9A%E5%AE%A2%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>Hexo的NexT主题可以天然支持友链，即在NexT主题的配置文件_config.yml中有一个# Blog rolls块，可以添加友链，然后在左边栏的底端会显示它们。但这样的问题在于边栏的空间有限，友链比较多的话会影响布局，而且分散主题。于是考虑单独创建一个友链页面，搜索发现已经有成型的方案，大体思路与 # Hexo添加自定义分类菜单项并定制页面布局 一样，增加菜单项和友链模版，再修改主页模板。这样做可以解决问题，但是不够优雅，属于侵入式的定制（直接修改了主题文件模板），但绝大多数人都采用了这种方案 :-)。</p>
<p>可行方案选择<br>经过思考发现大概有几个方案：</p>
<p>1.直接使用NexT主题的Blog roll<br>2.定制友情链接模版<br>3.在markdown中内嵌友链css和html<br>第一种方案简单粗暴，但扩展性差；第二种方案能达到目的，但实现步骤繁琐，另外以后升级NexT主题就麻烦了，大概率需要手动merge代码，因为修改了NexT主题的模版文件；最后一种方案非常完美，非侵入式实现，不动源码，只改配置文件，扩展方便，copy一段html即可新增友链，唯一的缺点就是需要内嵌一段css，稍显丑陋。</p>
<p>在采用这种方法之前还走过一点弯路，考虑直接做一个不被渲染的HTML（利用 skip_render）放到source文件夹中，但发现这样做会丢失页面框架，与其他页面风格不一致。</p>
<p>新建一个post</p>
<p>在source文件夹下建一个文件夹links，里面放一个文件index.md，即友链页面：</p>
<div class="post-body">
   <div id="links">
      <style>
         .links-content{
         margin-top:1rem;
         }
         .link-navigation::after {
         content: " ";
         display: block;
         clear: both;
         }
         .card {
         width: 45%;
         font-size: 1rem;
         padding: 10px 20px;
         border-radius: 4px;
         transition-duration: 0.15s;
         margin-bottom: 1rem;
         display:flex;
         }
         .card:nth-child(odd) {
         float: left;
         }
         .card:nth-child(even) {
         float: right;
         }
         .card:hover {
         transform: scale(1.1);
         box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04);
         }
         .card a {
         border:none;
         }
         .card .ava {
         width: 3rem!important;
         height: 3rem!important;
         margin:0!important;
         margin-right: 1em!important;
         border-radius:4px;
         }
         .card .card-header {
         font-style: italic;
         overflow: hidden;
         width: 100%;
         }
         .card .card-header a {
         font-style: normal;
         color: #2bbc8a;
         font-weight: bold;
         text-decoration: none;
         }
         .card .card-header a:hover {
         color: #d480aa;
         text-decoration: none;
         }
         .card .card-header .info {
         font-style:normal;
         color:#a3a3a3;
         font-size:14px;
         min-width: 0;
         overflow: hidden;
         white-space: nowrap;
         }
      </style>
      <div class="links-content">
         <div class="link-navigation">
            <div class="card">
               <img class="ava" src="/images/1.jpg">
               <div class="card-header">
                  <div>
                     <a href="https://yaofuquan1.github.io/">My’s blog</a>
                  </div>
                  <div class="info">我的小站。</div>
               </div>
            </div>
            <div class="card">
               <img class="ava" src="/images/2.jpg" ">
               <div class="card-header">
                  <div>
                     <a href="https://cjldegh.github.io">Lee's Blog</a>
                 </div>
                 <div class="info">小陈</div>
                </div>
            </div>
         </div>
      </div>
   </div>
</div>


<p>其实就是一段css再接上几个div，以后每加一个友链，只需要复制如下一段即可：</p>
<div class="card">
   <img class="ava" src="/2022/11/06/hexo%E5%8D%9A%E5%AE%A2%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/{avatarurl}">
   <div class="card-header">
      <div>
         <a href="{link}">{name}</a>
      </div>
      <div class="info">{description}</div>
   </div>
</div>

<p>之后在每次hexo g时，就会生成一个links&#x2F;index.html文件。同时由于它不在source&#x2F;_posts文件中，hexo不会把它当成一篇新博客加入首页。</p>
<p>增加菜单项</p>
<p>在NexT主题的配置文件_config.yml中找到menu部分，加一行即可：</p>
<p><code>...</code><br><code>menu:</code><br>  <code>tags: /tags/ || tags</code><br>  <code>categories: /categories/ || th</code><br><code>...</code><br>  <code>Links: /links/ || link</code><br><code>...</code></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>姚福泉的第一篇博客</title>
    <url>/2022/11/06/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>1.hexo部署到github中出现的问题及解决办法 1<br>git报错fatal: unable to access ‘<a href="https://github.com/hxx.git/&#39;">https://github.com/hxx.git/&#39;</a>: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443<br>解决办法：<br>我通过:<br>    <code>git config --global http.proxy</code><br>查询到当前设置了代理，所以我取消这个设置：<br>    <code>git config --global --unset http.proxy</code>   </p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>生成UUID</title>
    <url>/2022/11/24/%E7%94%9F%E6%88%90UUID/</url>
    <content><![CDATA[<h4 id="UUID的简述"><a href="#UUID的简述" class="headerlink" title="UUID的简述"></a>UUID的简述</h4><p>UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，是一种软件建构的标准，亦为<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A/1223731?fromModule=lemma_inlink">开放软件基金会</a>组织在分布式计算环境领域的一部分。其目的，是让<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336?fromModule=lemma_inlink">分布式系统</a>中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下，就不需考虑<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728?fromModule=lemma_inlink">数据库</a>创建时的名称重复问题。</p>
<h4 id="我为什么需要UUID"><a href="#我为什么需要UUID" class="headerlink" title="我为什么需要UUID?"></a>我为什么需要UUID?</h4><p>在系统开发的时候，一般需要上传附件，然后会生成很长的一段网址，在对接SAP系统，我们需要对所传的文件地址进行处理：</p>
<p><img src="/2022/11/24/%E7%94%9F%E6%88%90UUID/1.png" alt="alt"></p>
<p>处理方法，将qinggou&#x2F;后面的用随机生成的8位UUID替换；</p>
<p>Java实现生成8位UUID的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">RandomGenerateUUID</span><span class="params">()</span> &#123;</span><br><span class="line">   String[] chars = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>,</span><br><span class="line">         <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>,</span><br><span class="line">         <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>,</span><br><span class="line">         <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">         <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>,</span><br><span class="line">         <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>&#125;;</span><br><span class="line">   <span class="comment">//调用Java提供的生成随机字符串的对象：32位，十六进制，中间包含-</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="type">StringBuffer</span> <span class="variable">shortBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123; <span class="comment">//分为8组</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> uuid.substring(i * <span class="number">4</span>, i * <span class="number">4</span> + <span class="number">4</span>); <span class="comment">//每组4位</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(str, <span class="number">16</span>); <span class="comment">//输出str在16进制下的表示</span></span><br><span class="line">      shortBuffer.append(chars[x % <span class="number">0x3E</span>]); <span class="comment">//用该16进制数取模62（十六进制表示为314（14即E）），结果作为索引取出字符</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> shortBuffer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中还用到了字符串和数组的转换方法，和字符串的拼接</p>
<p>方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">subqgimg</span><span class="params">(String str)</span>&#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;https://*****.oss-cn-hangzhou.******.com/pub/dev/erp/qinggou/vq6VImN4.jpg;https://*****.oss-cn-hangzhou.******.com/pub/dev/erp/qinggou/tOowCI7Q.jpg&quot;</span>;</span><br><span class="line">   String[] imgs = str.split(<span class="string">&quot;;&quot;</span>);<span class="comment">//将字符串转换为数组</span></span><br><span class="line">   <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">   <span class="keyword">for</span> (String s : imgs) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> s.replace(<span class="string">&quot;https://*****.oss-cn-hangzhou.******.com/pub/dev/erp/qinggou/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      stringBuffer.append(s1).append(<span class="string">&quot;;&quot;</span>);字符串的拼接</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>处理后：</p>
<p><img src="/2022/11/24/%E7%94%9F%E6%88%90UUID/2.png" alt="alt"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java时间格式转换</title>
    <url>/2022/11/16/java%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h5 id="一、获取当前时间"><a href="#一、获取当前时间" class="headerlink" title="一、获取当前时间"></a>一、获取当前时间</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br></pre></td></tr></table></figure>

<h5 id="三、-日期转时间戳"><a href="#三、-日期转时间戳" class="headerlink" title="三、 日期转时间戳"></a>三、 日期转时间戳</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> String.valueOf(date.getTime());</span><br><span class="line">System.out.println(timestamp);</span><br></pre></td></tr></table></figure>

<h5 id="四、-时间戳转日期"><a href="#四、-时间戳转日期" class="headerlink" title="四、 时间戳转日期"></a>四、 时间戳转日期</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> <span class="string">&quot;1521480110000&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Long</span>(timestamp));</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure>

<h5 id="五、-日期转字符串"><a href="#五、-日期转字符串" class="headerlink" title="五、 日期转字符串"></a>五、 日期转字符串</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">System.out.println(dateStr);</span><br></pre></td></tr></table></figure>

<h5 id="六、-字符串转日期"><a href="#六、-字符串转日期" class="headerlink" title="六、 字符串转日期"></a>六、 字符串转日期</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2018-05-16 19:30:20&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(dateStr);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure>

<h5 id="七、-CST格式转日期"><a href="#七、-CST格式转日期" class="headerlink" title="七、 CST格式转日期"></a>七、 CST格式转日期</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;</span>, java.util.Locale.US); <span class="comment">// 注意使用Locale.US参数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cst</span> <span class="operator">=</span> <span class="string">&quot;Tue May 16 19:30:20 CST 2018&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(cst);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure>

<h5 id="八、-非标准格式转日期"><a href="#八、-非标准格式转日期" class="headerlink" title="八、 非标准格式转日期"></a>八、 非标准格式转日期</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">        sdf.setLenient(<span class="literal">false</span>); <span class="comment">// 设置严格验证日期</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;20180516&quot;</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(dateStr);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure>

<h5 id="九、-日期字符串格式转换"><a href="#九、-日期字符串格式转换" class="headerlink" title="九、 日期字符串格式转换"></a>九、 日期字符串格式转换</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdfSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdfTarget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dateSource</span> <span class="operator">=</span> <span class="string">&quot;20180516&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">dateTarget</span> <span class="operator">=</span> sdfTarget.format(sdfSource.parse(dateSource));</span><br><span class="line">System.out.println(dateTarget);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="十、-日期转日历"><a href="#十、-日期转日历" class="headerlink" title="十、 日期转日历"></a>十、 日期转日历</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">c.setTime(date);</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure>

<h5 id="十一、-日历转日期"><a href="#十一、-日历转日期" class="headerlink" title="十一、 日历转日期"></a>十一、 日历转日期</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> c.getTime();</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure>

<h5 id="十二、日期计算"><a href="#十二、日期计算" class="headerlink" title="十二、日期计算"></a>十二、日期计算</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDateCalculateUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">// 日期计算.例子:2018-05-16 19:30:20</span></span><br><span class="line">        DateUtils.setYears(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">2019</span>); <span class="comment">// 根据参数设置日期年份.输出:2019-05-16 19:30:20</span></span><br><span class="line">        DateUtils.addMonths(<span class="keyword">new</span> <span class="title class_">Date</span>(), -<span class="number">1</span>); <span class="comment">// 根据参数增加日期月份.输出:2019-04-16 19:30:20</span></span><br><span class="line">        DateUtils.truncate(<span class="keyword">new</span> <span class="title class_">Date</span>(), Calendar.DATE); <span class="comment">// 根据参数截取日期.输出:2019-04-16 00:00:00</span></span><br><span class="line">        DateUtils.ceiling(<span class="keyword">new</span> <span class="title class_">Date</span>(), Calendar.DATE);  <span class="comment">// 根据参数向上进位日期.输出:2018-05-17 00:00:00</span></span><br><span class="line">        DateUtils.getFragmentInDays(<span class="keyword">new</span> <span class="title class_">Date</span>(), Calendar.MONTH); <span class="comment">// 根据参数截取范围内日期后返回天数.输出:16</span></span><br><span class="line">        DateUtils.truncatedEquals(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="keyword">new</span> <span class="title class_">Date</span>(), Calendar.DATE); <span class="comment">//根据参数范围比较日期是否相同,该例子只比较年月日.输出:true</span></span><br><span class="line">        DateUtils.truncatedCompareTo(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="keyword">new</span> <span class="title class_">Date</span>(), Calendar.MONTH); <span class="comment">//根据参数范围比较日期大小,该例子只比较年月.输出:0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 举例</span></span><br><span class="line">        getFirstSecondOfMonth(); <span class="comment">// 获取当月第一秒</span></span><br><span class="line">        getLastSecondOfMonth(); <span class="comment">// 获取当月最后一秒</span></span><br><span class="line">        getDayOfYear(); <span class="comment">// 获取日期是该年的第几天</span></span><br><span class="line">        getFirstSundayOfMonth(); <span class="comment">// 获取当月的第一个周日</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getFirstSecondOfMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        date = DateUtils.truncate(date, Calendar.MONTH); <span class="comment">// 截取日期到月份</span></span><br><span class="line">        System.out.println(date); <span class="comment">// 输出:2018-05-01 00:00:00</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getLastSecondOfMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        date = DateUtils.ceiling(date, Calendar.MONTH); <span class="comment">// 向上进位月份</span></span><br><span class="line">        date = DateUtils.addSeconds(date, -<span class="number">1</span>); <span class="comment">// 减1秒</span></span><br><span class="line">        System.out.println(date); <span class="comment">// 输出:2018-05-31 23:59:59</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getDayOfYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">day</span> <span class="operator">=</span> DateUtils.getFragmentInDays(date, Calendar.YEAR); <span class="comment">// 截取年之后的日期部分,并按天数返回</span></span><br><span class="line">        System.out.println(day); <span class="comment">// 输出:136</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getFirstSundayOfMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        date = DateUtils.setDays(date, <span class="number">1</span>); <span class="comment">// 从该月第一天开始</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            c.setTime(date);</span><br><span class="line">            <span class="keyword">if</span> (c.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) &#123; <span class="comment">// 比较该天是否为周日</span></span><br><span class="line">                System.out.println(date); <span class="comment">// 输出:2018-05-06 19:30:20</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                date = DateUtils.addDays(date, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="十三、计算日期间隔的方法"><a href="#十三、计算日期间隔的方法" class="headerlink" title="十三、计算日期间隔的方法"></a>十三、计算日期间隔的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 两个日期之间实际的间隔,并按规定格式返回,如:2018.8.31与2018.9.4 相差5天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">period</span> <span class="operator">=</span> DurationFormatUtils.formatPeriod(DateUtils.addDays(<span class="keyword">new</span> <span class="title class_">Date</span>(), -<span class="number">5</span>).getTime(), <span class="keyword">new</span> <span class="title class_">Date</span>().getTime(), <span class="string">&quot;y-M-d&quot;</span>);</span><br><span class="line">        System.out.println(period); <span class="comment">// 相差5天,输出:0-0-5</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 计算两个月之间的间隔,跨月即算间隔1个月,如:2018.8.31与2018.9.4 相差1个月</span></span><br><span class="line">​    <span class="type">int</span> <span class="variable">periodOfMonth</span> <span class="operator">=</span> getPeriodOfMonth(DateUtils.addDays(<span class="keyword">new</span> <span class="title class_">Date</span>(), -<span class="number">5</span>), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">​    System.out.println(periodOfMonth); <span class="comment">// 相差1个月,输出:1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getPeriodOfMonth</span><span class="params">(Date dateBegin, Date dateEnd)</span> &#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">begin</span> <span class="operator">=</span> DateUtils.truncate(dateBegin, Calendar.MONTH);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">end</span> <span class="operator">=</span> DateUtils.truncate(dateEnd, Calendar.MONTH);</span><br><span class="line">    <span class="type">String</span> <span class="variable">period</span> <span class="operator">=</span> DurationFormatUtils.formatPeriod(begin.getTime(), end.getTime(), <span class="string">&quot;M&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(period);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo生成动画人物</title>
    <url>/2022/11/10/hexo%E7%94%9F%E6%88%90%E5%8A%A8%E7%94%BB%E4%BA%BA%E7%89%A9/hexo%E7%94%9F%E6%88%90%E5%8A%A8%E7%94%BB%E4%BA%BA%E7%89%A9/</url>
    <content><![CDATA[<p>1.安装hexo-helper-live2d</p>
<p><code>$ npm install --save hexo-helper-live2d</code></p>
<p>2.安装live2d</p>
<p>其中替换成想要的，比如我安装的的是live2d-widget-model-wanko</p>
<p>当然，还有很多的model可供选择，参考</p>
<p>xiazeyu&#x2F;live2d-widget-models</p>
<p>hexo live2d插件 2.0 !</p>
<p>$ npm install <live2d-widget-model><br>Click and drag to move</live2d-widget-model></p>
<p>安装live2d-widget-model-wanko</p>
<p><code>$ npm install live2d-widget-model-wanko</code></p>
<p>3.配置</p>
<p>在Hexo站点配置文件_config.yml，或者主题配置文件_config.yml中添加如下配置</p>
<p>至于每个配置项的作用看名字就很清楚，也可以修改值然后部署看下效果</p>
<p>更多详细的说明和配置，详见官网EYHN&#x2F;hexo-helper-live2d</p>
<p>$$<br>live2d:<br>  enable: true<br>  scriptFrom: local<br>  pluginRootPath: live2dw&#x2F;<br>  pluginJsPath: lib&#x2F;<br>  pluginModelPath: assets&#x2F;<br>  tagMode: false<br>  log: false<br>  model:<br>    use: live2d-widget-model-wanko<br>  display:<br>    position: right<br>    width: 150<br>    height: 300<br>  mobile:<br>    show: true<br>  react:<br>    opacity: 0.7<br>$$</p>
<p>重新hexo d -g即可看到效果</p>
]]></content>
  </entry>
</search>
